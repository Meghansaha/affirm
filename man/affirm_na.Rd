% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/affirm_class.R, R/affirm_clean_join.R,
%   R/affirm_na.R
\name{affirm_na}
\alias{affirm_na}
\alias{affirm_class}
\alias{affirm_clean_join}
\alias{affirm_not_na}
\title{Affirm Class}
\usage{
affirm_class(
  data,
  label,
  columns,
  class,
  id = NA_integer_,
  priority = NA_integer_,
  data_frames = NA_character_,
  report_listing = NULL,
  data_action = NULL,
  error = getOption("affirm.error", default = FALSE)
)

affirm_clean_join(
  data,
  label,
  id = NA_integer_,
  priority = NA_integer_,
  data_frames = NA_character_,
  report_listing = NULL,
  data_action = NULL,
  error = getOption("affirm.error", default = FALSE)
)

affirm_na(
  data,
  label,
  column,
  id = NA_integer_,
  priority = NA_integer_,
  data_frames = NA_character_,
  report_listing = NULL,
  data_action = NULL,
  error = getOption("affirm.error", default = FALSE)
)

affirm_not_na(
  data,
  label,
  column,
  id = NA_integer_,
  priority = NA_integer_,
  data_frames = NA_character_,
  report_listing = NULL,
  data_action = NULL,
  error = getOption("affirm.error", default = FALSE)
)
}
\arguments{
\item{data}{a data frame}

\item{label}{a string used to describe the affirmation}

\item{columns}{columns to check class}

\item{class}{character class to affirm}

\item{id, priority, data_frames}{Optional additional information that will be passed to affirmation report.
\itemize{
\item \code{id} must be an integer, e.g. \code{id = 1L}
\item \code{priority} must be an integer, e.g. \code{priority = 1L}
\item \code{data_frames} string of data frame names used in affirmation, e.g. \code{data_frames = "RAND, DM"}
}}

\item{report_listing}{an expression selecting/filtering rows from \verb{data=} to return in the
issue listing report. The default is to return the result from \code{create_report_listing()},
which are the rows that do \emph{not} met in \verb{condition=}
and columns included in the \verb{condition=} expression along with any columns
set in \code{option('affirm.id_cols')}. The \code{'affirm.id_cols'} option must be a
character vector of column names, where columns will be selected with
\code{select(any_of(getOption('affirm.id_cols')))}.}

\item{data_action}{this expression is executed at the end of the function call when supplied.
\itemize{
\item Default is NULL, and the passed data frame in \verb{data=} is returned unaltered.
\item Perhaps you'll need to remove problematic rows: \code{data_action = filter(., !(!!condition))}
}}

\item{error}{Logical indicating whether to throw an error when condition is not met. Default is \code{FALSE}.}

\item{column}{column to check NA values against}
}
\value{
data frame

data frame

data frame
}
\description{
A wrapper for \code{affirm_true()}.
Reports \code{columns} that do not inherit \code{class}, e.g.
\verb{select(data, all_of(columns) && where(\\(x) !inherits(x, class)))}

A wrapper for \code{affirm_true()}.
Reports \code{columns} whose names end with \code{".x"} or \code{".y"}, indicating
a sloppy merge.

A wrapper for \code{affirm_true()}.
The columns argument is used to construct the
\code{affirm_true(condition = is.na(column))} argument.
}
\examples{
affirm_init(replace = TRUE)

affirm_class(
  as_tibble(iris),
  label = "all cols are numeric (but Species really isn't)",
  columns = everything(),
  class = "numeric"
)

affirm_close()
affirm_init(replace = TRUE)

df <-
  dplyr::tibble(lgl = c(NA, TRUE, NA, FALSE, NA)) |>
  dplyr::mutate(id = dplyr::row_number())

affirm_clean_join(
  dplyr::full_join(df, df, by = "id"),
  label = "Checking for clean merge"
)

affirm_close()
affirm_init(replace = TRUE)
}
\seealso{
Other Data Affirmations: 
\code{\link{affirm_false}()},
\code{\link{affirm_no_dupes}()},
\code{\link{affirm_range}()},
\code{\link{affirm_true}()},
\code{\link{affirm_values}()}

Other Data Affirmations: 
\code{\link{affirm_false}()},
\code{\link{affirm_no_dupes}()},
\code{\link{affirm_range}()},
\code{\link{affirm_true}()},
\code{\link{affirm_values}()}

Other Data Affirmations: 
\code{\link{affirm_false}()},
\code{\link{affirm_no_dupes}()},
\code{\link{affirm_range}()},
\code{\link{affirm_true}()},
\code{\link{affirm_values}()}
}
\concept{Data Affirmations}
