% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/construct_report_listing.R
\name{construct_report_listing}
\alias{construct_report_listing}
\title{Construct Report Listing Call}
\usage{
construct_report_listing(rows = NULL, columns = NULL, label = FALSE)
}
\arguments{
\item{rows}{expression that evaluates to a logical vector.
Default is \code{!.env$lgl_condition}. This logical vector is passed to \code{dplyr::filter()}}

\item{columns}{expression that includes the columns to include in report.}

\item{label}{logical indicating whether to add a new column with the
affirmation label.}
}
\value{
a quosure
}
\description{
Each of the validation functions has a \code{affirm_*(report_listing)} argument.
This call constructs the data frame that is returned in the affirmation report,
and can be difficult to construct.

The \code{construct_report_listing()} helps users construct this call.
The bang-bang operator (\verb{!!}) must be used in the affirmation function call,
e.g. \code{affirm_*(report_listing = !!construct_report_listing())}.
See example below.
}
\examples{
# return columns am and cyl; add new column with affirmation label
construct_report_listing(columns = c(am, cyl), label = TRUE)

# example how to use this function with an affirmation function
affirm_init(replace = TRUE)

as_tibble(mtcars) |>
 affirm_true(
   label = "No. cylinders must be 4 or 6",
   condition = cyl \%in\% c(4, 6),
   report_listing = !!construct_report_listing(columns = c(am, cyl), label = TRUE)
 ) |>
 invisible()

 affirm_report_raw_data()$data

affirm_close()
}
